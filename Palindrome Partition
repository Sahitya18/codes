****** RECURSION *******
class a {
    public static void main(String[] args) {
        System.out.println(PalindromePartition("aab", 0, 2));
    }

    private static int PalindromePartition(String s, int i, int j) {
        if (i >= j || palindrome(s.substring(i, j+1)))
            return 0;
        int ans = Integer.MAX_VALUE;
        for (int k = i; k < j; k++) {
            int temp = PalindromePartition(s, i, k) + PalindromePartition(s, k + 1, j) + 1;
            ans = Math.min(ans, temp);
        }
        return ans;
    }
    private static boolean palindrome(String s) {
        return new StringBuffer(s).reverse().toString().equals(s);
    }

}
****** MEMOIZATIONA *******

class a {
    public static void main(String[] args) {
        int dp[][] = new int[4][4];
        System.out.println(PalindromePartition("aab", 0, 2, dp));
    }

    private static int PalindromePartition(String s, int i, int j, int dp[][]) {
        if (i >= j || palindrome(s.substring(i, j + 1)))
            return 0;
        if (dp[i][j] != 0)
            return dp[i][j];
        int ans = Integer.MAX_VALUE;
        for (int k = i; k < j; k++) {
            int temp = PalindromePartition(s, i, k, dp) + PalindromePartition(s, k + 1, j, dp) + 1;
            ans = Math.min(ans, temp);
        }
        return dp[i][j] = ans;
    }

    private static boolean palindrome(String s) {
        return new StringBuffer(s).reverse().toString().equals(s);
    }
}
